pipeline {
    agent any
 
    environment {
        GIT_REPO = 'https://github.com/pkumarmshetty/e2e_inji_verify.git'
        GIT_BRANCH = 'test' 
        DOCKER_IMAGE_BASE = 'raparna154/inji-verify-service'
        MANIFEST_REPO_BRANCH = 'main'
    }
 
    stages {
        stage('Clean Workspace') {
            steps {
                sh 'rm -rf e2e_inji_verify || true'
            }
        }
 
        stage('Clone Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubpat2', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                        git clone https://$GIT_USER:$GIT_TOKEN@github.com/pkumarmshetty/e2e_inji_verify.git
                        cd e2e_inji_verify
                        git checkout $GIT_BRANCH
                        """
                    }
                }
            }
        }
 
        stage('Get Commit Hash') {
            steps {
                script {
                    COMMIT_HASH = sh(
                        script: "cd e2e_inji_verify && git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    DOCKER_IMAGE = "${DOCKER_IMAGE_BASE}:${COMMIT_HASH}-${BUILD_NUMBER}"
                    echo "Docker Image Tag: ${DOCKER_IMAGE}"
                }
            }
        }
 
        stage('Build Docker Image') {
            steps {
                script {
                    dir('e2e_inji_verify/ui') {
                        sh """
                        docker build -t $DOCKER_IMAGE .
                        """
                    }
                }
            }
        }
 
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhubpat', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push $DOCKER_IMAGE
                        docker logout
                        """
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    // Clone the Git repository containing Kubernetes manifests
                    dir('inji-infra-azure') {
                    git branch: MANIFEST_REPO_BRANCH,
                    credentialsId: 'githubpat2',
                    url: 'https://github.com/Aparnadeloitte/inji-infra-azure.git'
                    // Navigate to the 'inji-verify' directory
                    dir('inji-verify') {
                    // Update the image tag in the deployment manifest
                    sh """
                    sed -i 's|image: .*|image: $DOCKER_IMAGE_BASE:$BUILD_NUMBER|' values.yaml
                    """
                    // Commit and push changes
                    sh """
                    git add -A
                    git commit -m "Update image to $DOCKER_IMAGE_BASE:$BUILD_NUMBER"
                    git push origin $MANIFEST_REPO_BRANCH
                    """
                }
            }
        }
    }
}

    }


        //stage('Update Kubernetes Manifests') {
            //steps {
                //script {
                    // Clone the Git repository containing Kubernetes manifests
                    //withCredentials([usernamePassword(credentialsId: 'githubpat2', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        //sh """
                        //rm -rf inji-infra-azure
                        //git clone https://$GIT_USER:$GIT_TOKEN@github.com/Aparnadeloitte/inji-infra-azure.git
                        //cd inji-verify
                        //pwd
                        //ls
                        //git checkout $MANIFEST_REPO_BRANCH
                        //"""
                    //}

                    // Update the image tag in the deployment manifest
                    //sh """
                    //sed -i 's|image: .*|image: $DOCKER_IMAGE_BASE:$BUILD_NUMBER|' values.yaml
                    //"""
                    // Commit and push changes
                    //sh """
                    //git add values.yaml
                    //git commit -m "Update image to $DOCKER_IMAGE"
                    //git push origin $MANIFEST_REPO_BRANCH
                    //"""
                //}
            //}
        //}
    //}

    post {
        success {
            echo "Pipeline completed successfully! Pushed Docker Image: ${DOCKER_IMAGE}"
        }
        failure {
            echo "Pipeline failed! Last attempted Docker Image Tag: ${DOCKER_IMAGE}"
        }
    }
}